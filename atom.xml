<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>my blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-05T10:00:17.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liuhaosen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP状态码</title>
    <link href="http://yoursite.com/2020/03/05/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://yoursite.com/2020/03/05/HTTP状态码/</id>
    <published>2020-03-05T09:58:14.751Z</published>
    <updated>2020-03-05T10:00:17.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP的状态码"><a href="#HTTP的状态码" class="headerlink" title="HTTP的状态码"></a>HTTP的状态码</h1><h4 id="1、-2-开头-（请求成功）表示成功处理了请求的状态代码。"><a href="#1、-2-开头-（请求成功）表示成功处理了请求的状态代码。" class="headerlink" title="1、 2**开头 （请求成功）表示成功处理了请求的状态代码。"></a>1、 2**开头 （请求成功）表示成功处理了请求的状态代码。</h4><p>200 （成功） 服务器已成功处理了请求。   通常，这表示服务器提供了请求的网页。<br>201 （已创建） 请求成功并且服务器创建了新的资源。<br>202 （已接受） 服务器已接受请求，但尚未处理。<br>203 （非授权信息）   服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。<br>205 （重置内容）   服务器成功处理了请求，但没有返回任何内容。<br>206 （部分内容） 服务器成功处理了部分 GET 请求。  </p>
<h4 id="2、-3-开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向"><a href="#2、-3-开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向" class="headerlink" title="2、 3** 开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向"></a>2、 3** 开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</h4><p>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302 （临时移动）   服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307 （临时重定向）   服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<h4 id="3、-4-开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"><a href="#3、-4-开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。" class="headerlink" title="3、 4**开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"></a>3、 4**开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</h4><p>400 （错误请求） 服务器不理解请求的语法。<br>401 （未授权） 请求要求身份验证。   对于需要登录的网页，服务器可能返回此响应。<br>403 （禁止） 服务器拒绝请求。<br>404 （未找到） 服务器找不到请求的网页。<br>405 （方法禁用） 禁用请求中指定的方法。<br>406 （不接受） 无法使用请求的内容特性响应请求的网页。<br>407 （需要代理授权） 此状态代码与   401（未授权）类似，但指定请求者应当授权使用代理。<br>408 （请求超时） 服务器等候请求时发生超时。  </p>
<h4 id="4、-5-开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。"><a href="#4、-5-开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。" class="headerlink" title="4、 5**开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。"></a>4、 5**开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</h4><p>500 （服务器内部错误） 服务器遇到错误，无法完成请求。<br>501 （尚未实施） 服务器不具备完成请求的功能。   例如，服务器无法识别请求方法时可能会返回此代码。<br>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504 （网关超时）   服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP的状态码&quot;&gt;&lt;a href=&quot;#HTTP的状态码&quot; class=&quot;headerlink&quot; title=&quot;HTTP的状态码&quot;&gt;&lt;/a&gt;HTTP的状态码&lt;/h1&gt;&lt;h4 id=&quot;1、-2-开头-（请求成功）表示成功处理了请求的状态代码。&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es6笔记</title>
    <link href="http://yoursite.com/2020/02/26/es6/"/>
    <id>http://yoursite.com/2020/02/26/es6/</id>
    <published>2020-02-26T01:28:45.043Z</published>
    <updated>2020-02-26T01:45:26.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6笔记"><a href="#es6笔记" class="headerlink" title="es6笔记"></a>es6笔记</h1><p>prototype原型</p>
<p>变量的解构赋值要使undefined才会默认值生效</p>
<p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>
<p>Object.keys返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</p>
<p>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p>
<p>set 不会添加相同的数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const s = new Set();</div><div class="line"></div><div class="line">[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));</div><div class="line"></div><div class="line">for (let i of s) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div><div class="line">// 2 3 5 4</div></pre></td></tr></table></figure></p>
<p>Set.prototype.keys()：返回键名的遍历器;<br>Set.prototype.values()：返回键值的遍历器;<br>Set.prototype.entries()：返回键值对的遍历器;<br>Set.prototype.forEach()：使用回调函数遍历每个成员;</p>
<p>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。<br>Map.prototype.keys()：返回键名的遍历器。<br>Map.prototype.values()：返回键值的遍历器。<br>Map.prototype.entries()：返回所有成员的遍历器。<br>Map.prototype.forEach()：遍历 Map 的所有成员。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div><div class="line">// &quot;F&quot; &quot;no&quot;</div><div class="line">// &quot;T&quot; &quot;yes&quot;</div><div class="line"></div><div class="line">for (let [key, value] of map.entries()) &#123;</div><div class="line">  console.log(key, value);</div><div class="line">&#125;</div><div class="line">// &quot;F&quot; &quot;no&quot;</div><div class="line">// &quot;T&quot; &quot;yes&quot;</div></pre></td></tr></table></figure></p>
<p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费。</p>
<p>arguments、super、new.target  </p>
<h2 id="this关键字总是指向函数所在的当前对象，super指向当前对象的原型对象"><a href="#this关键字总是指向函数所在的当前对象，super指向当前对象的原型对象" class="headerlink" title="this关键字总是指向函数所在的当前对象，super指向当前对象的原型对象"></a>this关键字总是指向函数所在的当前对象，super指向当前对象的原型对象</h2><p>prototype 是引入的一个针对于某一类的对象的方法，而且特殊的地方便在于：它是一个给类的对象添加方法的方法！</p>
<p>Number.add(num)：作用，数字相加</p>
<p>实现方法：Number.prototype.add = function(num){return(this+num);}</p>
<h2 id="试验：alert-3-add-15-gt-显示-18"><a href="#试验：alert-3-add-15-gt-显示-18" class="headerlink" title="试验：alert((3).add(15)) -&gt; 显示 18"></a>试验：alert((3).add(15)) -&gt; 显示 18</h2><p>iterator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var someString = &quot;hi&quot;;</div><div class="line">typeof someString[Symbol.iterator]</div><div class="line">// &quot;function&quot;</div><div class="line"></div><div class="line">var iterator = someString[Symbol.iterator]();</div><div class="line"></div><div class="line">for (var value of iterator) &#123;</div><div class="line">  console.log(value); // 0, 1, 2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var str = new String(&quot;hi&quot;);</div><div class="line"></div><div class="line">[...str] // [&quot;h&quot;, &quot;i&quot;]</div><div class="line"></div><div class="line">str[Symbol.iterator] = function() &#123;</div><div class="line">  return &#123;</div><div class="line">    next: function() &#123;</div><div class="line">      if (this._first) &#123;</div><div class="line">        this._first = false;</div><div class="line">        return &#123; value: &quot;bye&quot;, done: false &#125;;</div><div class="line">      &#125; else &#123;</div><div class="line">        return &#123; done: true &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    _first: true</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[...str] // [&quot;bye&quot;]</div><div class="line">str // &quot;hi&quot;</div></pre></td></tr></table></figure>
<p>数组原生具备iterator接口（即默认部署了Symbol.iterator属性），for…of循环本质上就是调用这个接口产生的遍历器，可以用下面的代码证明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const arr = [&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;];</div><div class="line"></div><div class="line">for(let v of arr) &#123;</div><div class="line">  console.log(v); // red green blue</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>Generate<br>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。</p>
<p>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p>
<hr>
<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Point(x, y) &#123;</div><div class="line">  this.x = x;</div><div class="line">  this.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString = function () &#123;</div><div class="line">  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var p = new Point(1, 2);</div></pre></td></tr></table></figure></p>
<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;//构造方法</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继承</p>
<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p>
<p>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ColorPoint extends Point &#123;</div><div class="line">  constructor(x, y, color) &#123;</div><div class="line">    this.color = color; // ReferenceError</div><div class="line">    super(x, y);</div><div class="line">    this.color = color; // 正确</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;es6笔记&quot;&gt;&lt;a href=&quot;#es6笔记&quot; class=&quot;headerlink&quot; title=&quot;es6笔记&quot;&gt;&lt;/a&gt;es6笔记&lt;/h1&gt;&lt;p&gt;prototype原型&lt;/p&gt;
&lt;p&gt;变量的解构赋值要使undefined才会默认值生效&lt;/p&gt;
&lt;p&gt;数组是复合的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue笔记</title>
    <link href="http://yoursite.com/2020/02/26/vue%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/26/vue笔记/</id>
    <published>2020-02-26T01:28:25.792Z</published>
    <updated>2020-02-26T01:44:50.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue笔记"><a href="#vue笔记" class="headerlink" title="vue笔记"></a>vue笔记</h1><p>axios</p>
<p>基于Promise的HTTP请求客户端, 可以同时在浏览器和node.js使用.</p>
<hr>
<p>Vuex 主要有四部分<br>state：包含了store中存储的各个状态。<br>getter: 类似于 Vue 中的计算属性，根据其他 getter 或 state 计算返回值。<br>mutation: 一组方法，是改变store中状态的执行者，只能是同步操作。<br>action: 一组方法，其中可以包含异步操作。</p>
<p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。也就是说，前面两个都是状态值本身，mutations才是改变状态的执行者。</p>
<p>想要异步地更改状态，就需要使用action。action并不直接改变state，而是发起mutation</p>
<hr>
<p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return。</p>
<hr>
<p>事件冒泡<br>事件冒泡的走向是由子节点向父节点去触发同名事件</p>
<p>stop 阻止自身的冒泡事件<br>prevent 阻止默认事件<br>capture 添加事件侦听器时使用事件捕获模式 :   用捕获的模式来触发<br>self : 阻止自己身上的冒泡行为<br>once 事件只触发一次  </p>
<p>v-if 和 v-show 条件渲染<br>v-if：根据表达式的值的真假条件，销毁或重建元素<br>v-show：根据表达式之真假值，切换元素的 display CSS 属性  </p>
<p>v-model双向绑定数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;h1 v-show=&quot;true&quot;&gt;v-show的显示和隐藏&lt;/h1&gt;</div><div class="line">    &lt;h1 v-if=&quot;isIf&quot;&gt;v-if的显示和隐藏&lt;/h1&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;/&gt; </div><div class="line">    &lt;button @click = &quot;aa&quot;&gt;点我&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    let vm = new Vue(&#123;</div><div class="line">        el:&quot;#app&quot;,</div><div class="line">        data:&#123;</div><div class="line">            isIf:true,</div><div class="line">            msg:&quot;请输入用户名&quot;</div><div class="line">        &#125;,</div><div class="line">        methods:&#123;</div><div class="line">        	aa : function()&#123;</div><div class="line">        		console.log(this.msg);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">```    </div><div class="line">v-for循环  </div><div class="line">v-bind绑定属性  </div><div class="line">```&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;!--绑定属性--&gt;</div><div class="line">    &lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;!--简写--&gt;</div><div class="line">    &lt;img :src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</div><div class="line">    </div><div class="line">    &lt;!--&lt;div style=&quot;width: 100px;height: 100px;&quot; v-bind:class=&apos;isred?&quot;red&quot;:&quot;blue&quot;&apos;&gt;&lt;/div&gt;--&gt; </div><div class="line"></div><div class="line">    &lt;!--class绑定 : 绑定的是字符串的类名--&gt;</div><div class="line">    &lt;h2 :class=&quot;&apos;red&apos;&quot;&gt;class绑定&lt;/h2&gt;</div><div class="line">    &lt;h2 :class=&quot;[&apos;red&apos;, &apos;pink&apos;]&quot;&gt;class绑定&lt;/h2&gt;</div><div class="line">    &lt;h2 :class=&quot;red&quot;&gt;不写引号class绑定,去vm实例中找&lt;/h2&gt;</div><div class="line"></div><div class="line">    &lt;h2 :class=&quot;&#123;red : flag, pink:true&#125;&quot;&gt;以对象的方式去写,通过布尔值判定,key是style里面的类名&lt;/h2&gt;</div><div class="line"></div><div class="line">    &lt;!--三元表达式: 当flag为true,就有red样式, 否则有pink样式--&gt;</div><div class="line">    &lt;h2 :class=&quot;[flag?red:pink]&quot;&gt;三元表达式&lt;/h2&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    let vm = new Vue(&#123;</div><div class="line">        el:&apos;#app&apos;,</div><div class="line">        data:&#123;</div><div class="line">            imgSrc:&apos;1.png&apos;,</div><div class="line">            red:&apos;red&apos;,</div><div class="line">            flag:true</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>v-on添加事件  </p>
<hr>
<p>父子组件传值<br>父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息，</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue笔记&quot;&gt;&lt;a href=&quot;#vue笔记&quot; class=&quot;headerlink&quot; title=&quot;vue笔记&quot;&gt;&lt;/a&gt;vue笔记&lt;/h1&gt;&lt;p&gt;axios&lt;/p&gt;
&lt;p&gt;基于Promise的HTTP请求客户端, 可以同时在浏览器和node.js使用.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js笔记</title>
    <link href="http://yoursite.com/2020/02/26/js%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/26/js笔记/</id>
    <published>2020-02-26T01:28:04.082Z</published>
    <updated>2020-02-26T01:44:01.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js笔记"><a href="#js笔记" class="headerlink" title="js笔记"></a>js笔记</h1><p>js基本数据类型  </p>
<h2 id="String-Number-Boolean-Null-Undefined，Symbo"><a href="#String-Number-Boolean-Null-Undefined，Symbo" class="headerlink" title="String, Number, Boolean, Null, Undefined，Symbo  "></a>String, Number, Boolean, Null, Undefined，Symbo  </h2><p>css单位<br>vw、vh 当前视口高度的百分比<br>em 是相对于其父元素的字体大小<br>rem 是相对于根元素（html）的字体大小  </p>
<p>css选择器优先级<br>内联&gt;id选择器&gt;类选择器&gt;标签选择器  </p>
<hr>
<p>块级元素、行内元素的区别<br>·行内元素和其他行内元素都会在一条水平线上排列，都是在同一行的；块级元素却总是会在新的一行开始排列，各个块级元素独占一行，垂直向下排列<br>·行内元素不可以设置宽高，宽度高度随文本内容的变化而变化，同时在设置外边距margin上下无效，左右有效，内填充padding上下无效，左右有效；<br>·块级元素可以设置宽高，并且宽度高度以及外边距，内填充都可随意控制。        </p>
<hr>
<p>元素的层叠次序<br>z-index高的在上<br>子元素在父元素上  </p>
<hr>
<p>cookie、session<br>cookie属性<br>name属性 唯一必须设置的属性，表示Cookie的名称。<br>expires属性 指定Cookie在删除之前要在客户机上保持多长时间，<br>path属性 决定Cookie对于服务器上的其他网页的可用性，在一般情况下，Cookie对于同一目录下的所有页面都可用。当设置path属性后，Cookie只对指定路径以及子路径的所有网页有效。<br>domain属性 　许多服务器都由多台服务器组成，domian属性主要设置相同域的多台服务器共享一个Cookie。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">document.cookie = name + &quot;=&quot; + escape(value) + &quot;;expires=&quot; + exp.toGMTString();//存cookie</div><div class="line"></div><div class="line">let strCookie = document.cookie.split(&quot;;&quot;);</div><div class="line">for(let i = 0 ; i &lt; strCookie.length ; i++ )</div><div class="line">&#123;</div><div class="line">	let strHead = strCookie[i].split(&quot;=&quot;);</div><div class="line">	if(strHead[0] == &quot;userid&quot;)</div><div class="line">	&#123;</div><div class="line">		username.value = strHead[1];</div><div class="line">	&#125;</div><div class="line">&#125;//拿cookie</div></pre></td></tr></table></figure></p>
<p>Cookie是浏览器访问一些网站后，这些网站存放在客户端的一组数据<br>Cookie的Domain和Path属性标识了这个Cookie是哪一个网站发送给浏览器的；Cookie的Expires属性标识了Cookie的有 效时间，当Cookie的有效时间过了之后，这些数据就被自动删除了。<br>因为每一个会话有一个sessionId，该SessionId是在浏览器本地的cookie中存储的，而每一个SessionId的过期时间是浏览会话结束时。所以只要当前浏览器窗口没有关闭，该sessionId依旧是存活的。</p>
<hr>
<p>深拷贝与浅拷贝<br>浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；<br>区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//Object.assign来实现深拷贝</div><div class="line">let obj1 = &#123;</div><div class="line">   a: &#123;</div><div class="line">     b: 1</div><div class="line">   &#125;,</div><div class="line">   c: 2</div><div class="line">&#125;</div><div class="line">let obj2 = Object.assign(&#123;&#125;,obj1)</div><div class="line">obj2.a.b = 3;</div><div class="line">obj2.c = 3</div><div class="line">console.log(obj1.a.b); // 3</div><div class="line">console.log(obj2.a.b); // 3</div><div class="line">console.log(obj1.c); // 2</div><div class="line">console.log(obj2.c); // 3</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js笔记&quot;&gt;&lt;a href=&quot;#js笔记&quot; class=&quot;headerlink&quot; title=&quot;js笔记&quot;&gt;&lt;/a&gt;js笔记&lt;/h1&gt;&lt;p&gt;js基本数据类型  &lt;/p&gt;
&lt;h2 id=&quot;String-Number-Boolean-Null-Undefined，Sy
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器的渲染机制</title>
    <link href="http://yoursite.com/2020/02/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/02/26/浏览器渲染机制/</id>
    <published>2020-02-26T01:27:07.180Z</published>
    <updated>2020-02-26T02:00:42.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的渲染机制"><a href="#浏览器的渲染机制" class="headerlink" title="浏览器的渲染机制"></a>浏览器的渲染机制</h1><p>GUI渲染线程<br>·负责渲染浏览器界面，解析HTML,CSS,构建DOM树和RenderObject树，布局和绘制等。<br>·当界面需要重绘或由于某种操作引发回流时，该线程就会执行。  </p>
<h2 id="·注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于冻结了）-GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。"><a href="#·注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于冻结了）-GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。" class="headerlink" title="·注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于冻结了）,GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。 "></a>·注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于冻结了）,GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。 </h2><p>JS引擎线程<br>JS引擎线程负责解析JavaScript脚本，运行代码。<br>JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（render进程）中无论什么时候都只有一个JS线程在运行JS程序。  </p>
<h2 id="同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。"><a href="#同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。" class="headerlink" title="同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。  "></a>同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。  </h2><p>事件触发线程<br>归属于浏览器而不是JS引擎，用来控制事件循环（可以理解成JS引擎自己都忙不过来，需要浏览器另开线程协助）。<br>当JS引擎执行代码块如setTimeout时（也可来自浏览器内核的其它线程，如鼠标点击，AJAX异步请求等），会将对应任务添加到事件线程中。<br>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。  </p>
<h2 id="注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。"><a href="#注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。" class="headerlink" title="注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。  "></a>注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。  </h2><p>定时触发器线程<br>传说中的setTimeout和setInterval所在的线程<br>浏览器定时计数器并不是由JavaScript引擎计数的，（因为JavaScript引擎是单线程的，如果处于阻塞线程状态就会影响计时的准确）  </p>
<h2 id="因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）"><a href="#因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）" class="headerlink" title="因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）  "></a>因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）  </h2><p>异步http请求线程<br>在XMLHttpRequest在连接后是通过浏览器新型一个线程请求<br>将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中，再由JavaScript引擎执行  </p>
<hr>
<h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p>浏览器渲染引擎工作流程都差不多，大致分为5步，创建DOM树——创建StyleRules——创建Render树——布局Layout——绘制Painting</p>
<p>第一步，用HTML分析器，分析HTML元素，构建一颗DOM树(标记化和树构建)。</p>
<p>第二步，用CSS分析器，分析CSS文件和元素上的inline样式，生成页面的样式表。</p>
<p>第三步，将DOM树和样式表，关联起来，构建一颗Render树(这一过程又称为Attachment)。每个DOM节点都有attach方法，接受样式信息，返回一个render对象(又名renderer)。这些render对象最终会被构建成一颗Render树。</p>
<p>第四步，有了Render树，浏览器开始布局，为每个Render树上的节点确定一个在显示屏上出现的精确坐标。</p>
<p>第五步，Render树和节点显示坐标都有了，就调用每个节点paint方法，把它们绘制出来。</p>
<h3 id="js操作dom的代价"><a href="#js操作dom的代价" class="headerlink" title="js操作dom的代价"></a>js操作dom的代价</h3><p>用我们传统的开发模式，原生JS或JQ操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程。在一次操作中，我需要更新10个DOM节点，浏览器收到第一个DOM请求后并不知道还有9次更新操作，因此会马上执行流程，最终执行10次。例如，第一次计算完，紧接着下一个DOM更新请求，这个节点的坐标值就变了，前一次计算为无用功。计算DOM节点坐标值等都是白白浪费的性能。即使计算机硬件一直在迭代更新，操作DOM的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户体验。</p>
<h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>虚拟DOM就是为了解决浏览器性能问题而被设计出来的。如前，若一次操作中有10次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性attch到DOM树上，再进行后续操作，避免大量无谓的计算量。所以，用JS对象模拟DOM节点的好处是，页面的更新可以先全部反映在JS对象(虚拟DOM)上，操作内存中的JS对象的速度显然要更快，等更新完成后，再将最终的JS对象映射成真实的DOM，交由浏览器去绘制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器的渲染机制&quot;&gt;&lt;a href=&quot;#浏览器的渲染机制&quot; class=&quot;headerlink&quot; title=&quot;浏览器的渲染机制&quot;&gt;&lt;/a&gt;浏览器的渲染机制&lt;/h1&gt;&lt;p&gt;GUI渲染线程&lt;br&gt;·负责渲染浏览器界面，解析HTML,CSS,构建DOM树和Render
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue是如何工作的-双向绑定</title>
    <link href="http://yoursite.com/2020/02/23/vue%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
    <id>http://yoursite.com/2020/02/23/vue是如何工作的/</id>
    <published>2020-02-23T02:22:24.662Z</published>
    <updated>2020-02-24T08:20:28.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue是如何工作的-双向绑定"><a href="#vue是如何工作的-双向绑定" class="headerlink" title="vue是如何工作的-双向绑定"></a>vue是如何工作的-双向绑定</h1><p>双向绑定是由数据劫持结合发布者订阅者模式来实现的</p>
<p>通过Object.defineProperty()来劫持对象属性的setter和getter操作<br>object.defineProperty(obj , prop , descriptor)<br>obj :是要在其上定义属性的对象  prop: 要定义或修改的属性的名称  description: 将被定义或修改的属性描述符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var book = &#123;&#125;;</div><div class="line">var name = &apos;&apos;;</div><div class="line">	Object.defineProperty(book , &apos;name&apos; , &#123;</div><div class="line">		set: function(value)&#123;</div><div class="line">			name = value;</div><div class="line">			console.log(&apos;you got a name called &apos; + value);</div><div class="line">		&#125;,</div><div class="line">		get: function()&#123;</div><div class="line">			console.log(&apos;get方法被监听到&apos;);</div><div class="line">			return &apos;&lt;&apos; + name +&apos;&gt;&apos;;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	book.name = &apos;人性的弱点&apos;;</div><div class="line">	console.log(book.name);</div></pre></td></tr></table></figure>
<p>这样便输出了带&lt;&gt;的name</p>
<p>发布者-订阅者模式<br>打个比方，所谓的订阅者，就像我们在日常生活中订阅报纸一样，在订阅报纸的时候，通常都得需要在报社或者一些中介机构进行注册，当有新版的报纸发刊的时候，邮递员就需要向订阅该报纸的人，依次发放报纸．</p>
<p>所有如果用代码实现该模式，需要进行两个步骤：<br>1、初始化发布者、订阅者。<br>2、订阅者需要注册到发布者，发布者发布消息时，依次向订阅者发布消息。</p>
<p>实现过程<br>那么要对数据进行劫持监听，所以我们首先要设置一个监听器Observer,用来监听所有的属性，当属性变化时，就需要通知订阅者Watcher,看是否需要更新．因为属性可能是多个，所以会有多个订阅者，故我们需要一个消息订阅器Dep来专门收集这些订阅者，并在监听器Observer和订阅者Watcher之间进行统一的管理．以为在节点元素上可能存在一些指令，所以我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，将相关指令初始化成一个订阅者Watcher，并替换模板数据并绑定相应的函数，这时候当订阅者Watcher接受到相应属性的变化，就会执行相对应的更新函数，从而更新视图．</p>
<p>整理上面的思路，我们需要实现三个步骤，来完成双向绑定：<br>1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。<br>2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。<br>3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
<p>1.实现一个监听器Observer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data , key , val) &#123;</div><div class="line">	observe(val); //递归遍历所有属性</div><div class="line">	Object.defineProperty(data , key , &#123;</div><div class="line">		enumerable: true,//当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中</div><div class="line">		configurable: true,//当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。</div><div class="line">		get: function()&#123;</div><div class="line">			return val;</div><div class="line">		&#125;,</div><div class="line">		set:function(newVal)&#123;</div><div class="line">			val = newVal;</div><div class="line">			console.log(&apos;属性&apos;+key+&apos;已经被监听,现在值为:&quot;&apos;+newVal.toString()+&apos;&quot;&apos;);			</div><div class="line">		&#125;</div><div class="line">	&#125;)	</div><div class="line">&#125;//对劫持函数进行重新定义</div><div class="line"></div><div class="line">function observe(data)&#123;</div><div class="line">	if(!data || typeof data !== &apos;object&apos;)&#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line">	Object.keys(data).forEach(function(key)&#123;</div><div class="line">		defineReactive(data,key,data[key]);</div><div class="line">	&#125;)</div><div class="line">&#125;//实现劫持</div><div class="line"></div><div class="line">var library = &#123;</div><div class="line">    book1: &#123;</div><div class="line">        name: &apos;&apos;</div><div class="line">    &#125;,</div><div class="line">    book2: &apos;&apos;</div><div class="line">&#125;;</div><div class="line">observe(library);</div><div class="line">library.book1.name = &apos;vue权威指南&apos;; // 属性name已经被监听了，现在值为：“vue权威指南”</div><div class="line">library.book2 = &apos;没有此书籍&apos;;  // 属性book2已经被监听了，现在值为：“没有此书籍”</div></pre></td></tr></table></figure></p>
<p>通过observe()方法进行遍历向下找到所有的属性，并通过defineReactive()方法进行数据劫持监听．</p>
<p>在上面的思路中，我们需要一个可以容纳消息订阅者的消息订阅器Dep，订阅器主要收集消息订阅者，然后在属性变化时执行相应订阅者的更新函数，那么消息订阅器Dep需要有一个容器，用来存放消息订阅者．我们将上面的监听器Observer稍微修改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data,key,val) &#123;</div><div class="line">    observe(val);</div><div class="line">    var dep = new Dep();</div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if (是否需要添加订阅者) &#123;    //Watcher初始化触发</div><div class="line">                dep.addSub(watcher); // 在这里添加一个订阅者</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function observe(data) &#123;</div><div class="line">    if(!data || typeof data !== &apos;object&apos;) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    Object.keys(data).forEach(function(key)&#123;</div><div class="line">        defineReactive(data,key,data[key]);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Dep() &#123;</div><div class="line">    this.subs = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//prototype 属性使您有能力向对象添加属性和方法</div><div class="line">//prototype这个属性只有函数对象才有，具体的说就是构造函数具有.只要你声明定义了一个函数对象，这个prototype就会存在</div><div class="line">//对象实例是没有这个属性</div><div class="line">Dep.prototype = &#123;                        </div><div class="line">    addSub:function(sub) &#123;</div><div class="line">        this.subs.push(sub);</div><div class="line">    &#125;,</div><div class="line">    notify:function() &#123;</div><div class="line">        this.subs.forEach(function(sub) &#123;</div><div class="line">            sub.update();        //通知每个订阅者检查更新</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Dep.target = null;</div></pre></td></tr></table></figure>
<p>在代码中，我们将订阅器Dep添加一个订阅者设计在get里面，这是为了让Watcher在初始化时触发，因此判断是否需要需要添加订阅者，至于具体实现的方法，我们在下文中深究．在set方法中，如果函数变化，就会通知所有的订阅者，订阅者们将会执行相对应的更新函数，到目前为止，一个比较完善的Observer已经成型了，下面我们要写订阅者Watcher.</p>
<p>2.Watcher<br>根据我们的思路，订阅者Wahcher在初始化时要将自己添加到订阅器Dep中，那么如何进行添加呢？</p>
<p>我们已经知道监听器Observer是在get函数中执行了添加订阅者的操作的，所以我们只需要在订阅者Watcher在初始化时触发相对应的get函数来执行添加订阅者的操作即可．那么怎么触发对应的get函数呢？我们只需要获取对应的属性值，就可以通过Object.defineProperty( )触发对应的get了．</p>
<p>在这里需要注意一个细节，我们只需要在订阅者初始化时才执行添加订阅者，所以我们需要一个判断，在Dep.target上缓存一下订阅者，添加成功后去除就行了，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function Watcher(vm,exp,cb) &#123;</div><div class="line">    this.vm = vm;    //指向SelfVue的作用域</div><div class="line">    this.exp = exp;  //绑定属性的key值</div><div class="line">    this.cb = cb;    //闭包</div><div class="line">    this.value = this.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Watcher.prototype = &#123;</div><div class="line">    update:function() &#123;</div><div class="line">        this.run();</div><div class="line">    &#125;,</div><div class="line">    run:function() &#123;</div><div class="line">        var value = this.vm.data[this.exp];</div><div class="line">        var oldVal = this.value;</div><div class="line">        if(value !== oldVal) &#123;</div><div class="line">            this.value = value;</div><div class="line">            this.cb.call(this.vm,value,oldVal);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    get:function() &#123;</div><div class="line">        Dep.target = this;                   // 缓存自己</div><div class="line">        var value = this.vm.data[this.exp];  // 强制执行监听器里的get函数</div><div class="line">        Dep.target = null;                   // 释放自己</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在对observe进行相应的调整<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data,key,val) &#123;</div><div class="line">    observe(val);</div><div class="line">    var dep = new Dep();</div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if(Dep.target) &#123;   //判断是否需要添加订阅者</div><div class="line">                 dep.addSub(Dep.target);</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再定义一个SelfVue类，来实现observer和watcher的关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	</div><div class="line">	&lt;div id=&quot;app&quot;&gt;</div><div class="line">		&lt;h2 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;input v-model = &quot;name&quot;&gt;</div><div class="line">		&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">		&lt;button v-on-click=&quot;clickMe&quot;&gt;&lt;/button&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./observer3.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./compile2.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./watcher1.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./index4.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script &gt;</div><div class="line">	var ele = document.querySelector(&apos;#name&apos;);</div><div class="line">	var selfVue = new SelfVue(&#123;</div><div class="line">         name:&apos;hello world&apos;</div><div class="line">     &#125;,ele,&apos;name&apos;);</div><div class="line"></div><div class="line">function SelfVue(data,el,exp) &#123;</div><div class="line">    var self = this;</div><div class="line">    this.data = data;</div><div class="line">    //Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组</div><div class="line">    Object.keys(data).forEach(function(key) &#123;</div><div class="line">        self.proxyKeys(key);     //绑定代理属性</div><div class="line">    &#125;);</div><div class="line">    observe(data);</div><div class="line">    el.innerHTML = this.data[exp];   // 初始化模板数据的值</div><div class="line">    new Watcher(this,exp,function(value) &#123;</div><div class="line">        el.innerHTML = value;</div><div class="line">    &#125;);</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SelfVue.prototype = &#123;</div><div class="line">    proxyKeys:function(key) &#123;</div><div class="line">        var self = this;</div><div class="line">        Object.defineProperty(this,key,&#123;</div><div class="line">            enumerable:false,</div><div class="line">            configurable:true,</div><div class="line">            get:function proxyGetter() &#123;</div><div class="line">                return self.data[key];</div><div class="line">            &#125;,</div><div class="line">            set:function proxySetter(newVal) &#123;</div><div class="line">                self.data[key] = newVal;</div><div class="line">            &#125; </div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">	window.setTimeout(function() &#123;</div><div class="line">         console.log(&apos;name值改变了&apos;);</div><div class="line">         selfVue.data.name = &apos;byebye world&apos;;</div><div class="line">     &#125;,2000);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue是如何工作的-双向绑定&quot;&gt;&lt;a href=&quot;#vue是如何工作的-双向绑定&quot; class=&quot;headerlink&quot; title=&quot;vue是如何工作的-双向绑定&quot;&gt;&lt;/a&gt;vue是如何工作的-双向绑定&lt;/h1&gt;&lt;p&gt;双向绑定是由数据劫持结合发布者订阅者模式来实
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html5</title>
    <link href="http://yoursite.com/2020/02/21/html5/"/>
    <id>http://yoursite.com/2020/02/21/html5/</id>
    <published>2020-02-21T13:30:15.339Z</published>
    <updated>2020-02-22T16:03:55.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h1><p>可以向html添加新的元素，并为该元素定义新的样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">myHero&#123;</div><div class="line">  		display: block;</div><div class="line">  		background-color: #aaa;</div><div class="line">  		padding: 50px;</div><div class="line">  		font-size: 30px;</div><div class="line">&#125;</div><div class="line">&lt;myHero&gt;我的第一个新元素&lt;/myHero&gt;</div></pre></td></tr></table></figure></p>
<p>canvas绘图以及内嵌svg</p>
<p>MathML可以使在网页内直接显示数学符号，如a的平方、线代矩阵等</p>
<p>可以直接实现拖拽，ondragstart和setdata()来设置拖动什么，ondragover设置防止何处</p>
<p>可使用getCurrentPosition()来获得用户位置</p>
<p>新增video、audio标签</p>
<p>input支持提交更多的类型，颜色时间等等</p>
<p>form/input新增属性autocomplete自动填充，autofocus自动获得焦点等</p>
<p>nav标签定义导航链接的部分</p>
<p>localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。<br>sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p>
<p>支持应用缓存，及在脱机的时候仍可访问。manifest文件是简单的文本文件，它告知浏览器被缓存的内容。</p>
<p>webworker 允许创建一个后台运行的脚本，其并不影响页面的性能</p>
<p>SSE server-sent event server-sent事件是指网页自动获取来自服务器的更新（以前要经过询问）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var source=new EventSource(&quot;demo_sse.php&quot;);</div><div class="line">source.onmessage=function(event)</div><div class="line">&#123;</div><div class="line">    document.getElementById(&quot;result&quot;).innerHTML+=event.data + &quot;&lt;br&gt;&quot;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>每接收到一次更新，就会发生onmessage事件</p>
<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。<br>最主要是可由服务器向客户端推送数据</p>
<p>socket是tcp/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议<br>socket 套接字，TCP/IP网络的API。(港口码头/车站)Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html5&quot;&gt;&lt;a href=&quot;#html5&quot; class=&quot;headerlink&quot; title=&quot;html5&quot;&gt;&lt;/a&gt;html5&lt;/h1&gt;&lt;p&gt;可以向html添加新的元素，并为该元素定义新的样式&lt;br&gt;&lt;figure class=&quot;highlight plai
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>springboot的一些注解</title>
    <link href="http://yoursite.com/2020/02/21/springboot%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E9%87%8A/"/>
    <id>http://yoursite.com/2020/02/21/springboot的一些注释/</id>
    <published>2020-02-21T02:40:03.872Z</published>
    <updated>2020-02-26T01:30:26.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot的一些注解"><a href="#springboot的一些注解" class="headerlink" title="springboot的一些注解"></a>springboot的一些注解</h1><p>lombook<br>@Data 生成get、set、tostring、hashcode等<br>@AllArgsConstructor 根据所有属性，生成一个带参数的构造方法<br>@NoArgsConstructor 生成一个无参构造<br>@Builder 生成一个建造器对象<br>@Getter 只生成get<br>@Setter 只生成set</p>
<p>@slf4j 日志生成器，相当于system.out<br>    public void add (int a , int b){<br>    {<br>        log.dubg(a);<br>        log,dubg(b);<br>    }</p>
<hr>
<p>@Controller 用来表示Spring某个类的是否可以接收HTTP请求<br>@ResponseBody 用json作为返回的数据类型<br>@Mapper为接口生成一个实现类，让别的类进行引用<br>@Repository 专门加在数据访问层，让springboot可以扫描到</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot的一些注解&quot;&gt;&lt;a href=&quot;#springboot的一些注解&quot; class=&quot;headerlink&quot; title=&quot;springboot的一些注解&quot;&gt;&lt;/a&gt;springboot的一些注解&lt;/h1&gt;&lt;p&gt;lombook&lt;br&gt;@Data 生
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>垂直居中的方法</title>
    <link href="http://yoursite.com/2020/02/21/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/21/垂直居中的方法/</id>
    <published>2020-02-21T02:07:41.273Z</published>
    <updated>2020-02-22T16:03:59.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垂直居中的方法"><a href="#垂直居中的方法" class="headerlink" title="垂直居中的方法"></a>垂直居中的方法</h1><p>不需要固定的宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">background: #ccc;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50% , -50%);</div></pre></td></tr></table></figure></p>
<p>需要固定的宽高才可起作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">height: 70px;</div><div class="line">right: 0;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">margin: auto;</div></pre></td></tr></table></figure></p>
<p>设定父层display:flex以及设定次轴(cross axis)属性align-items:center ，这个方式的优点是此层不需要设定高度即可自动居中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	width: 500px;</div><div class="line">	height: 250px;</div><div class="line">	margin: auto;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div><div class="line">.content&#123;</div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">	background: #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">	&lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;垂直居中的方法&quot;&gt;&lt;a href=&quot;#垂直居中的方法&quot; class=&quot;headerlink&quot; title=&quot;垂直居中的方法&quot;&gt;&lt;/a&gt;垂直居中的方法&lt;/h1&gt;&lt;p&gt;不需要固定的宽度&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域的一些东西</title>
    <link href="http://yoursite.com/2018/03/23/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/03/23/跨域/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2018-03-23T02:37:19.011Z</updated>
    
    <content type="html"><![CDATA[<p>一.、什么是跨域？<br>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。<br>所谓同源是指，域名，协议，端口均相同，不明白没关系，举个栗子：<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="http://www.123.com/server.php" target="_blank" rel="external">http://www.123.com/server.php</a> （非跨域）<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="http://www.456.com/server.php" target="_blank" rel="external">http://www.456.com/server.php</a> （主域名不同:123/456，跨域）<br><a href="http://abc.123.com/index.html" target="_blank" rel="external">http://abc.123.com/index.html</a> 调用 <a href="http://def.123.com/server.php" target="_blank" rel="external">http://def.123.com/server.php</a> （子域名不同:abc/def，跨域）<br><a href="http://www.123.com:8080/index.html" target="_blank" rel="external">http://www.123.com:8080/index.html</a> 调用 <a href="http://www.123.com:8081/server.php" target="_blank" rel="external">http://www.123.com:8081/server.php</a> （端口不同:8080/8081，跨域）<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="https://www.123.com/server.php" target="_blank" rel="external">https://www.123.com/server.php</a> （协议不同:http/https，跨域）<br>请注意：localhost和127.0.0.1虽然都指向本机，但也属于跨域。<br>浏览器执行javascript脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。</p>
<p>二、为什么浏览器要限制跨域访问呢？<br>原因就是安全问题：如果一个网页可以随意地访问另外一个网站的资源，那么就有可能在客户完全不知情的情况下出现安全问题。比如下面的操作就有安全问题：<br> &ensp;&ensp; &ensp; 1.用户访问www.mybank.com ，登陆并进行网银操作，这时cookie啥的都生成并存放在浏览器<br> &ensp;&ensp; &ensp; 2.用户突然想起件事，并迷迷糊糊地访问了一个邪恶的网站 www.xiee.com<br>  &ensp;&ensp; &ensp;3.这时该网站就可以在它的页面中，拿到银行的cookie，比如用户名，登陆token等，然后发起对www.mybank.com 的操作。<br> &ensp;&ensp;&ensp;  4.如果这时浏览器不予限制，并且银行也没有做响应的安全处理的话，那么用户的信息有可能就这么泄露了。</p>
<p>三、什么是协议？<br>简单来说，协议就是计算机与计算机之间通过网络实现通信时事先达成的一种”约定”，这种约定使那些由不同厂家生产的计算机，只要遵守相同的协议就能进行实现通信</p>
<p>四、url<br>每个Web服务器资源都有一个名字，这样客户端就可以说明他们感兴趣的资源是什么了。服务器资源名被统一称为统一资源标识符（url）。URL就像邮箱地址一样，在世界范围内唯一标识并定位信息资源。</p>
<p>五、域名  端口<br>在tcp中，你需要知道服务器的IP地址，以及与服务器上运行的特定软件相关的TCP端口号。<br>几个URL:<br><a href="http://207.200.83.29：80/index.html" target="_blank" rel="external">http://207.200.83.29：80/index.html</a><br><a href="http://www.netscape.com:80/index.html" target="_blank" rel="external">http://www.netscape.com:80/index.html</a><br><a href="http://www.netscape.com/index.html" target="_blank" rel="external">http://www.netscape.com/index.html</a><br>第一个URL使用了机器的IP地址，207.200.83.29以及端口号80。<br>第二个URL没有使用数字形式的IP地址，它使用的是文本形式形式的域名，或者称为主机名（www.netscape.com）。主机名就是IP地址比较人性化的别称。可以通过一种称为域名服务(DNS)的机制方便的将主机名转换为IP地址，这样所有问题就都解决了。第二章会介绍更多的关于DNS和URL的内容。<br>最后一个URL没有端口号。HTTP的URL中没有端口号时，可以假设默认端口号80。有了IP地址和端口号，客户端就可以方便的TCP/IP进行通信了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一.、什么是跨域？&lt;br&gt;跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。&lt;br&gt;所谓同源是指，域名，协议，端口均相同，不明白没关系，举个栗子：&lt;br&gt;&lt;a href=&quot;http://www.123.co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网页工具(随缘更)</title>
    <link href="http://yoursite.com/2018/03/23/%E7%BD%91%E9%A1%B5%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2018/03/23/网页工具/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2018-03-23T02:22:29.035Z</updated>
    
    <content type="html"><![CDATA[<p>分享一些工具</p>
<p>开发者头条</p>
<p>segmentfault<br>掘金<br>javascript高级程序设计</p>
<p>设计达人<br>阿里图标库<br>jqury插件库</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一些工具&lt;/p&gt;
&lt;p&gt;开发者头条&lt;/p&gt;
&lt;p&gt;segmentfault&lt;br&gt;掘金&lt;br&gt;javascript高级程序设计&lt;/p&gt;
&lt;p&gt;设计达人&lt;br&gt;阿里图标库&lt;br&gt;jqury插件库&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="http://yoursite.com/2018/03/20/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2018/03/20/原型链/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-03-23T02:27:48.278Z</updated>
    
    <content type="html"><![CDATA[<p>###js原型链</p>
<p>prototype 属性使您有能力向对象添加属性和方法。</p>
<p>简单来说就是属性的堆加继承<br>js中通过prototype来继承属性<br>prototype简单来说类似于c语言中的指针<br>用prototype继承谁，就相当于在主对象中创立一个新属性（指针）指向继承的对象</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function supertype()&#123;</div><div class="line">	this.property = true;</div><div class="line">&#125;</div><div class="line">supertype.prototype.getsupervalue = function()&#123;</div><div class="line">	return this.property;</div><div class="line">&#125;</div><div class="line">function subtype()&#123;</div><div class="line">	this.subproperty = false;</div><div class="line">&#125;</div><div class="line">//继承了supertype</div><div class="line">subtype.prototype = new supertype();</div><div class="line"></div><div class="line">subtype.prototype.getsubvalue = function()&#123;</div><div class="line">	return this.subproperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var instance = new subtype();</div><div class="line">alert(instance.getsupervalue());    //true</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###js原型链&lt;/p&gt;
&lt;p&gt;prototype 属性使您有能力向对象添加属性和方法。&lt;/p&gt;
&lt;p&gt;简单来说就是属性的堆加继承&lt;br&gt;js中通过prototype来继承属性&lt;br&gt;prototype简单来说类似于c语言中的指针&lt;br&gt;用prototype继承谁，就相当于
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>令人舒服的颜色(可能更新)</title>
    <link href="http://yoursite.com/2018/02/08/%E4%BB%A4%E4%BA%BA%E8%88%92%E6%9C%8D%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2018/02/08/令人舒服的颜色/</id>
    <published>2018-02-08T12:10:52.286Z</published>
    <updated>2018-02-08T12:51:51.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="令人舒服的颜色"><a href="#令人舒服的颜色" class="headerlink" title="令人舒服的颜色"></a>令人舒服的颜色</h2><p>蓝色  #2086b3</p>
<p>红色  暗红 #d45d5c   艳红 #e64c13</p>
<p>银色  #a9a9a9</p>
<p>黑色  #333333</p>
<p>橙黄  #ff8a27</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;令人舒服的颜色&quot;&gt;&lt;a href=&quot;#令人舒服的颜色&quot; class=&quot;headerlink&quot; title=&quot;令人舒服的颜色&quot;&gt;&lt;/a&gt;令人舒服的颜色&lt;/h2&gt;&lt;p&gt;蓝色  #2086b3&lt;/p&gt;
&lt;p&gt;红色  暗红 #d45d5c   艳红 #e64c13&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好用的css(可能更新)</title>
    <link href="http://yoursite.com/2018/02/08/%E5%A5%BD%E7%94%A8%E7%9A%84css/"/>
    <id>http://yoursite.com/2018/02/08/好用的css/</id>
    <published>2018-02-08T12:09:16.857Z</published>
    <updated>2018-02-08T12:26:01.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="好用的css"><a href="#好用的css" class="headerlink" title="好用的css"></a>好用的css</h3><p>cursor 当鼠标移到上面时鼠标形状会改变  如小手、指针等</p>
<p>feildset 非常漂亮的边框形式，很适合做登录界面等等</p>
<p>word-break：break-all   当</p><p>中文字超出边框可用这个</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;好用的css&quot;&gt;&lt;a href=&quot;#好用的css&quot; class=&quot;headerlink&quot; title=&quot;好用的css&quot;&gt;&lt;/a&gt;好用的css&lt;/h3&gt;&lt;p&gt;cursor 当鼠标移到上面时鼠标形状会改变  如小手、指针等&lt;/p&gt;
&lt;p&gt;feildset 非常漂亮的边
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域问题以及jquery跨域</title>
    <link href="http://yoursite.com/2018/02/08/%E8%B7%A8%E5%9F%9Fjquery/"/>
    <id>http://yoursite.com/2018/02/08/跨域jquery/</id>
    <published>2018-02-08T11:30:29.906Z</published>
    <updated>2018-02-08T12:25:59.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跨域问题以及jquery跨域"><a href="#跨域问题以及jquery跨域" class="headerlink" title="跨域问题以及jquery跨域"></a>跨域问题以及jquery跨域</h3><h4 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1.什么是跨域"></a>1.什么是跨域</h4><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。<br>所谓同源是指，域名，协议，端口均相同，不明白没关系，举个栗子：<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="http://www.123.com/server.php" target="_blank" rel="external">http://www.123.com/server.php</a> （非跨域）<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="http://www.456.com/server.php" target="_blank" rel="external">http://www.456.com/server.php</a> （主域名不同:123/456，跨域）<br><a href="http://abc.123.com/index.html" target="_blank" rel="external">http://abc.123.com/index.html</a> 调用 <a href="http://def.123.com/server.php" target="_blank" rel="external">http://def.123.com/server.php</a> （子域名不同:abc/def，跨域）<br><a href="http://www.123.com:8080/index.html" target="_blank" rel="external">http://www.123.com:8080/index.html</a> 调用 <a href="http://www.123.com:8081/server.php" target="_blank" rel="external">http://www.123.com:8081/server.php</a> （端口不同:8080/8081，跨域）<br><a href="http://www.123.com/index.html" target="_blank" rel="external">http://www.123.com/index.html</a> 调用 <a href="https://www.123.com/server.php" target="_blank" rel="external">https://www.123.com/server.php</a> （协议不同:http/https，跨域）<br>请注意：localhost和127.0.0.1虽然都指向本机，但也属于跨域。<br>浏览器执行javascript脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。</p>
<h4 id="2-为什么浏览器要限制跨域访问呢？"><a href="#2-为什么浏览器要限制跨域访问呢？" class="headerlink" title="2.为什么浏览器要限制跨域访问呢？"></a>2.为什么浏览器要限制跨域访问呢？</h4><p>原因就是安全问题：如果一个网页可以随意地访问另外一个网站的资源，那么就有可能在客户完全不知情的情况下出现安全问题。比如下面的操作就有安全问题：</p>
<ol>
<li>用户访问www.mybank.com ，登陆并进行网银操作，这时cookie啥的都生成并存放在浏览器</li>
<li>用户突然想起件事，并迷迷糊糊地访问了一个邪恶的网站 www.xiee.com</li>
<li>这时该网站就可以在它的页面中，拿到银行的cookie，比如用户名，登陆token等，然后发起对www.mybank.com 的操作。</li>
<li>如果这时浏览器不予限制，并且银行也没有做响应的安全处理的话，那么用户的信息有可能就这么泄露了。</li>
</ol>
<h4 id="3-什么是协议？"><a href="#3-什么是协议？" class="headerlink" title="3.什么是协议？"></a>3.什么是协议？</h4><p>简单来说，协议就是计算机与计算机之间通过网络实现通信时事先达成的一种”约定”，这种约定使那些由不同厂家生产的计算机，只要遵守相同的协议就能进行实现通信</p>
<h4 id="4-url"><a href="#4-url" class="headerlink" title="4.url"></a>4.url</h4><p>每个Web服务器资源都有一个名字，这样客户端就可以说明他们感兴趣的资源是什么了。服务器资源名被统一称为统一资源标识符（url）。URL就像邮箱地址一样，在世界范围内唯一标识并定位信息资源。</p>
<h4 id="5-域名-端口"><a href="#5-域名-端口" class="headerlink" title="5.域名  端口"></a>5.域名  端口</h4><p>在tcp中，你需要知道服务器的IP地址，以及与服务器上运行的特定软件相关的TCP端口号。<br>几个URL:<br><a href="http://207.200.83.29：80/index.html" target="_blank" rel="external">http://207.200.83.29：80/index.html</a><br><a href="http://www.netscape.com:80/index.html" target="_blank" rel="external">http://www.netscape.com:80/index.html</a><br><a href="http://www.netscape.com/index.html" target="_blank" rel="external">http://www.netscape.com/index.html</a><br>第一个URL使用了机器的IP地址，207.200.83.29以及端口号80。<br>第二个URL没有使用数字形式的IP地址，它使用的是文本形式形式的域名，或者称为主机名（www.netscape.com）。主机名就是IP地址比较人性化的别称。可以通过一种称为域名服务(DNS)的机制方便的将主机名转换为IP地址，这样所有问题就都解决了。第二章会介绍更多的关于DNS和URL的内容。<br>最后一个URL没有端口号。HTTP的URL中没有端口号时，可以假设默认端口号80。有了IP地址和端口号，客户端就可以方便的TCP/IP进行通信了。</p>
<h4 id="6-jquery跨域"><a href="#6-jquery跨域" class="headerlink" title="6.jquery跨域"></a>6.jquery跨域</h4><p>有很多种方法，目前先掌握一种</p>
<p>ajax本身是不可以跨域的，<br>通过产生一个script标签来实现跨域。因为script标签的src属性是没有跨域的限制的。</p>
<p>其实设置了dataType: ‘jsonp’后，$.ajax方法就和ajax XmlHttpRequest没什么关系了，取而代之的则是JSONP协议。JSONP是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问。</p>
<p> ajax的跨域写法：</p>
<p>（其余写法和不跨域的一样）：</p>
<p>比如 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/*当前网址是localhost:3000*/</div><div class="line">js代码</div><div class="line"> </div><div class="line">$.ajax(&#123;</div><div class="line">type:&quot;get&quot;,</div><div class="line">url:&quot;http://localhost:3000/showAll&quot;,/*url写异域的请求地址*/</div><div class="line">dataType:&quot;jsonp&quot;,/*加上datatype*/</div><div class="line">jsonpCallback:&quot;cb&quot;,/*设置一个回调函数，名字随便取，和下面的函数里的名字相同就行*/</div><div class="line">success:function()&#123;</div><div class="line">。。。</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">/*而在异域服务器上，*/</div><div class="line">app.js</div><div class="line">app.get(&apos;/showAll&apos;,students.showAll);/*这和不跨域的写法相同*/</div><div class="line"> </div><div class="line"> </div><div class="line">/*在异域服务器的showAll函数里，*/</div><div class="line"> </div><div class="line">var db = require(&quot;./database&quot;);</div><div class="line"> </div><div class="line">exports.showAll = function(req,res)&#123;</div><div class="line"> </div><div class="line">/**设置响应头允许ajax跨域访问**/</div><div class="line">res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);</div><div class="line">/*星号表示所有的异域请求都可以接受，*/</div><div class="line">res.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;GET,POST&quot;);</div><div class="line"> </div><div class="line">var con = db.getCon();</div><div class="line">con.query(&quot;select * from t_students&quot;,function(error,rows)&#123;</div><div class="line">if(error)&#123;</div><div class="line">console.log(&quot;数据库出错：&quot;+error);</div><div class="line">&#125;else&#123;</div><div class="line">/*注意这里，返回的就是jsonP的回调函数名+数据了*/</div><div class="line">res.send(&quot;cb(&quot;+JSON.stringify(r)+&quot;)&quot;);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;跨域问题以及jquery跨域&quot;&gt;&lt;a href=&quot;#跨域问题以及jquery跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域问题以及jquery跨域&quot;&gt;&lt;/a&gt;跨域问题以及jquery跨域&lt;/h3&gt;&lt;h4 id=&quot;1-什么是跨域&quot;&gt;&lt;a href=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>秒速5厘米影评（转）</title>
    <link href="http://yoursite.com/2018/02/08/%E7%A7%92%E9%80%9F5%E5%8E%98%E7%B1%B3%E5%BD%B1%E8%AF%84(%E8%BD%AC)/"/>
    <id>http://yoursite.com/2018/02/08/秒速5厘米影评(转)/</id>
    <published>2018-02-08T10:18:19.271Z</published>
    <updated>2020-02-26T01:39:50.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="别让我在街上遇到你——浅葱"><a href="#别让我在街上遇到你——浅葱" class="headerlink" title="别让我在街上遇到你——浅葱"></a>别让我在街上遇到你——浅葱</h3><p>都会有这样的经验吧。走在路上，下意识地会去寻找某个人，或者总是觉得有路人和那人相似，虽然，明知道Ta不会在这里出现，却仍然会望过去，发下呆。然后会笑自己。</p>
<p>突然就很想念十年前那些写信的日子和落雪的阴天，突然就很想写信很想在雪地上走。漂上来的场景还有天黑时坐在摇晃的无轨车最后排，是陪我最久的101或者103。茫然看着窗外后退的房和树和人，因为熟悉，所以哪怕只是微弱的轮廓也很安心地知道那是哪里。</p>
<p>后来就不在熟悉的城市了，在这里很少坐公车，有时只是坐一两站都会紧张。不曾搭车去看望遥远的思念，会飞去，再飞来，短得好像从没发生过，没痕迹，然后就被忘掉了。</p>
<p>还是有痕迹的。每每想起来都很绝望，特别是那些美好的部分，说爱情是橙那样的九分酸加一分甜，没有那些酸又怎么能感受到甜。我倒过来了，我尝到那甜，后面都是酸。然而无论再尝多少酸，那甜也不回来了。</p>
<p>也会反省是什么让我变得乖张，不停索取然后很少想到感谢。我不知道，总之就这样了，但是以后不行。</p>
<p>我很落伍地最近才知道新海诚，并且一开始还以为是个team，因为他的画实在太细致精妙了。我只看了她和她的猫、笑颜、秒速5厘米。都很好看。除了人和动物，他会把所有物体都描绘得非常写实加漂亮，每个小细节都不落下。光影，配色，确实梦幻。人和动物，却只用简单的线条，可以是想代入的任何人，可以是每一只想入戏的猫。</p>
<p>秒速5cm，清淡的叙事仍然看得有点疼。到了55分43秒的时候，那个有点过时的嗓音配上一句句翻上来的歌词飘散在不停闪回的画面间，我就开始哭。我觉得这个结尾很好，我很满意。看完一遍，再退回到55分43秒，重看，重哭。再重看，还是会再重哭。</p>
<p>一个城市又怎样，遇到了又如何，各有各的生活，各有各的哀乐。有时，我会在心里发一些没写收件人名字的短信，然后又在心里一个字一个字地删掉。</p>
<p>何必打扰。</p>
<p>………………乖乖地分割一下…………</p>
<p>上转自豆瓣</p>
<p><img src="http://p3vmw8i4e.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E7%A7%92%E9%80%9F%20%282%29.jpg" alt="秒速2"><br>。。。。。。。。。。。。。。。。。。。</p>
<p>one more time one more chance 若能像这首歌的名字一样，能够再来一次，多好<br>突然想起黄渤演的《记忆大师》里面，最后在度过难关后，他失去了和妻子相爱的所有记忆的感受（仿佛一个旁观者一样）<br>“对不起，我失去了我们之间所有的记忆”<br>“初次见面，我叫…”<br><img src="http://p3vmw8i4e.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E7%A7%92%E9%80%9F.jpg" alt="秒速1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;别让我在街上遇到你——浅葱&quot;&gt;&lt;a href=&quot;#别让我在街上遇到你——浅葱&quot; class=&quot;headerlink&quot; title=&quot;别让我在街上遇到你——浅葱&quot;&gt;&lt;/a&gt;别让我在街上遇到你——浅葱&lt;/h3&gt;&lt;p&gt;都会有这样的经验吧。走在路上，下意识地会去寻找某个人
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>闭包理解1.0</title>
    <link href="http://yoursite.com/2017/05/30/%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3%E4%B8%80%E7%82%B9%E9%9B%B6/"/>
    <id>http://yoursite.com/2017/05/30/闭包理解一点零/</id>
    <published>2017-05-30T12:52:12.000Z</published>
    <updated>2018-02-08T12:54:36.044Z</updated>
    
    <content type="html"><![CDATA[<p>循环加函数，是的函数无法直接调用上层的数据，使用闭包，函数只能使用函数中在变化值的最终值。若想获得变化值，<br>   则可以用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   for (var i = 1; i &lt; 4; i++) &#123; </div><div class="line">   var id = document.getElementById(&quot;a&quot; + i); </div><div class="line">   id.index=i;</div><div class="line">   id.onclick=function()</div><div class="line">   &#123;</div><div class="line">	alert(this.index)；</div><div class="line">    &#125;</div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">function init4() &#123;   </div><div class="line"> var pAry = document.getElementsByTagName(&quot;p&quot;);   </div><div class="line"> for( var i=0; i&lt;pAry.length; i++ ) &#123;    </div><div class="line">  (function () &#123;   </div><div class="line">   var temp = i;//调用时局部变量   </div><div class="line">   pAry[i].onclick = function() &#123;    </div><div class="line">    alert(temp);    </div><div class="line">   &#125;   </div><div class="line">  &#125;)();   </div><div class="line"> &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释:这个需要留意this的指向，this指向上一个调用它的对象，详情参考<a href="http://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="external">http://www.cnblogs.com/pssp/p/5216085.html</a><br>高程：this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于windows，而当函数被作为某个对象的方法调用时，this等于那个对象</p>
<p>下面做下分析：因为在for循环里面指定给list_obj[i].onclick的事件处理程序，<br>也就是onclick那个匿名函数是在for循环执行完成后（用户单击链接时）才被调用<br>的。而调用时，需要对变量i求值，解析程序首先会在事件处理程序内部查找，但i<br>没有定义。然后，又到方法外部去查找，此时有定义，但i的值是4（只有i大于4才<br>会停止执行for循环）。因此，就会取得该值——这正是闭包（匿名函数）要使用其<br>外部作用域中变量的结果。而且，这也是由于匿名函数本身无法传递参数（故而无<br>法维护自己的作用域）造成的。</p>
<p>另一篇文章上的回答<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function buildList(list)&#123;</div><div class="line">   var result=[];</div><div class="line">   for(var i=0;i&lt;list.length;i++)&#123;</div><div class="line">       var item=”item”+I;</div><div class="line">       result.push(function()&#123;</div><div class="line">          alert(item+” “+list[i])</div><div class="line">&#125;);</div><div class="line">   &#125;</div><div class="line">   return result;</div><div class="line">&#125;</div><div class="line">Function testList()&#123;</div><div class="line">   var funlist=buildlist([0,1,2]);</div><div class="line">   for(var i=0;i&lt;fnlist.length;i++)&#123;</div><div class="line">      fnlist[i](); //我觉得此处应该是fnlist[0]():”item0 0”  ;fnlist[1]():”item1 1”;  fnlist[2]():”item2 2”;</div><div class="line">      </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">testList(); //实际结果是“item2 undefined”3 times</div></pre></td></tr></table></figure></p>
<p>我是过来逗比的..不过道理是这么个道理..首先,我们需要知道JS在解析的时候有一个预解析阶段,在这个阶段,函数,变量的声明会被提升,并不是全部提升到全局,而是提升到所在范围的最顶端.假设我们自己是JS解析器,来走一遍流程. 首先,预解析:有个叫buildList的函数,有个testList 的函数,还有个匿名的,然后就是各种变量提升.<br>　　   然后调用testList 函数.第一句就是 fnlist=buildList([0,1,2]),好去找 buildList,buildList里有个循环,循环push一个函数,鬼知道是什么函数,反正函数没调用,直接原封不动的push,循环3次,i=3. 然后又来了一个循环,循环打印我刚才push的东西.此时应为我上回已经循环完了,所以我的i应该是3,但是list[3]?list是什么鬼,我不知道啊,(因为垃圾回收机制,buildList没有依赖,所以会被回收掉.),不知道就输出undefined,所以结果就是list2 undefined<br>　　所以这种问题就是写个闭包就行了,闭包就两个作用,一个就是读取变量,一个就是让变量常用内存.闭包写法 二楼的兄弟已经写好了,差不多就是这个道理.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环加函数，是的函数无法直接调用上层的数据，使用闭包，函数只能使用函数中在变化值的最终值。若想获得变化值，&lt;br&gt;   则可以用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>任务二代码</title>
    <link href="http://yoursite.com/2017/05/30/%E4%BB%BB%E5%8A%A1%E4%BA%8C%E4%BB%A3%E7%A0%81-1/"/>
    <id>http://yoursite.com/2017/05/30/任务二代码-1/</id>
    <published>2017-05-30T12:52:12.000Z</published>
    <updated>2017-05-30T15:12:13.916Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">  &lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">	&lt;title&gt;2&lt;/title&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	body&#123;</div><div class="line">		background: #DCDCDC;</div><div class="line">	&#125;</div><div class="line">	#one&#123;</div><div class="line">		background: #000000;</div><div class="line">		height: 50px;</div><div class="line">		margin-bottom: 70px;</div><div class="line">	&#125;</div><div class="line">    .two&#123;</div><div class="line">    	float: right;</div><div class="line">    &#125;</div><div class="line">    #three&#123;</div><div class="line">    	margin-bottom: 70px;</div><div class="line">    	margin-right: 20px;</div><div class="line">    	margin-left: 20px;</div><div class="line">    	background: white;</div><div class="line">    	padding-top: 10px;</div><div class="line">    	padding-right:40px;</div><div class="line">    	padding-left: 40px;</div><div class="line">    	padding-bottom: 50px</div><div class="line">    &#125;</div><div class="line">    #four&#123;</div><div class="line">    	border: 1px solid black;</div><div class="line">    	height: 150px;</div><div class="line">    	width: 150px;</div><div class="line">    	padding-right: 10px;</div><div class="line">    	padding-left: 10px;</div><div class="line">    	padding-bottom:10px;</div><div class="line">    	margin: 20px;</div><div class="line">    &#125;</div><div class="line">    th&#123;</div><div class="line">    	background: black;</div><div class="line">    	color: white;</div><div class="line">    &#125;</div><div class="line">    h3 h5&#123;</div><div class="line">        color: gray;</div><div class="line">    &#125;</div><div class="line">    form&#123;</div><div class="line">    	text-align: center;</div><div class="line">    	margin: 30px;</div><div class="line">    &#125;</div><div class="line">    .five&#123;</div><div class="line">    	</div><div class="line"></div><div class="line">    &#125;</div><div class="line">	a:link &#123;color: white;&#125;</div><div class="line">	a:visit &#123;color: gray;&#125; </div><div class="line">	p.biaodan &#123;</div><div class="line">				float: left;</div><div class="line">				text-align: center;</div><div class="line">				margin: 0px;</div><div class="line">	&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;div id=&quot;one&quot;&gt;&lt;img src=&quot;images/2.jpg&quot; width=&quot;120px&quot; height=&quot;50px&quot; &gt;</div><div class="line">    &lt;p class=&quot;two&quot;&gt;·&lt;a href=&quot;#&quot;&gt;导航链接一&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接二&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接三&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接四&lt;/a&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">    &lt;h1&gt;文章的一级标题&lt;/h1&gt;</div><div class="line">    &lt;h3&gt;文章的二级标题&lt;/h3&gt;</div><div class="line">    &lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，换行了&lt;/p&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这里有一个链接链接到&lt;a href=&quot;http://ife.baidu.com&quot;&gt;http://ife.baidu.com&lt;/a&gt;这是一个很长很长的段落,这是一个很长很长的段落,这里是个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落&lt;/p&gt;</div><div class="line">    &lt;img src=&quot;images/1.jpg&quot;&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是有个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,&lt;a href=&quot;http://ife.baidu.com&quot;&gt;这里有一个链接点击后打开新建窗口链接到http://ife.baidu.com&lt;/a&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    </div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">    &lt;h1&gt;另一篇文章的一级标题&lt;/h1&gt;</div><div class="line">    &lt;h3&gt;文章的二级标题&lt;/h2&gt;</div><div class="line">    &lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;</div><div class="line">    &lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,&lt;a href=&quot;http://ife.baidu.com&quot;&gt;这里有一个链接链接到http://ife.baide.com&lt;/a&gt;,这是一个很长很长的段落,这是一个很长很长的段落,这里有个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,。&lt;/p&gt;</div><div class="line">    &lt;img src=&quot;images/1.jpg&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">    &lt;li&gt;列表项目一&lt;/li&gt;</div><div class="line">    &lt;li&gt;列表项目二&lt;/li&gt;</div><div class="line">    &lt;li&gt;列表项目三&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">    &lt;h1&gt;图片&lt;/h1&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">    &lt;h1&gt;最后一篇文章一级标题&lt;/h1&gt;</div><div class="line">    &lt;h3&gt;文章的二级标题&lt;/h3&gt;</div><div class="line">    &lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;</div><div class="line">    &lt;ol&gt;</div><div class="line">    &lt;li&gt;排名1&lt;/li&gt;</div><div class="line">    &lt;li&gt;排名2&lt;/li&gt;</div><div class="line">    &lt;li&gt;排名3&lt;/li&gt;&lt;/ol&gt;</div><div class="line">    &lt;p&gt;下面是一个表格，我这里给表格加了一个border=1好让你看出是一个表格，你们不用写html时候不需要加&lt;/p&gt;</div><div class="line">    &lt;table border=&quot;1&quot; width=&quot;100%;&quot;&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;th&gt;表头&lt;/th&gt;</div><div class="line">    &lt;th&gt;表头&lt;/th&gt;</div><div class="line">    &lt;th&gt;表头&lt;/th&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;td&gt;表内容单元格&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;td background=&quot;gray&quot;&gt;总计&lt;/td&gt;</div><div class="line">    &lt;td colspan=&quot;2&quot; background=&quot;gray&quot;&gt;1000&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">    &lt;h3&gt;这是一个侧栏，这是侧栏的标题&lt;/h3&gt;</div><div class="line">    &lt;form&gt;请输入邮箱地址：&lt;input type=&quot;text&quot; value=&quot;这是一个文本框&quot;&gt;&lt;/form&gt;</div><div class="line">    &lt;form&gt;请输入密码：&lt;input type=&quot;password&quot; value=&quot;·········&quot;&gt;&lt;/form&gt;</div><div class="line">    &lt;form&gt;请重复输入密码：&lt;input type=&quot;password&quot; value=&quot;·········&quot;&gt;&lt;/form&gt;</div><div class="line">    &lt;form&gt;性别：&lt;input type=&quot;radio&quot; name=&quot;famel&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;famel&quot;&gt;女&lt;/form&gt;</div><div class="line">    &lt;form&gt;城市：&lt;select&gt;&lt;option&gt;北京&lt;/option&gt;&lt;/select&gt;&lt;/form&gt;</div><div class="line">    &lt;form&gt;&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;运动&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;艺术&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;科学&lt;/form&gt;</div><div class="line">    &lt;form style=&quot;width: 200px;&quot;&gt; &lt;p class=&quot;biaodan&quot;&gt; 个人描述 &lt;/p&gt; &lt;textarea class=&quot;five&quot; cols=&quot;10&quot; rows=&quot;4&quot;&gt;这是一个多行输入框&lt;/textarea&gt; &lt;/form&gt;</div><div class="line">    &lt;form&gt;&lt;input type=&quot;submit&quot; background=&quot;blue&quot; value=&quot;确认提交&quot;&gt;&lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/16/hello-world/"/>
    <id>http://yoursite.com/2017/05/16/hello-world/</id>
    <published>2017-05-16T04:19:19.873Z</published>
    <updated>2018-02-08T12:19:49.459Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;2&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
body{
    background: #DCDCDC;
}
#one{
    background: #000000;
    height: 50px;
    margin-bottom: 70px;
}
.two{
    float: right;
}
#three{
    margin-bottom: 70px;
    margin-right: 20px;
    margin-left: 20px;
    background: white;
    padding-top: 10px;
    padding-right:40px;
    padding-left: 40px;
    padding-bottom: 50px
}
#four{
    border: 1px solid black;
    height: 150px;
    width: 150px;
    padding-right: 10px;
    padding-left: 10px;
    padding-bottom:10px;
    margin: 20px;
}
th{
    background: black;
    color: white;
}
h3 h5{
    color: gray;
}
form{
    text-align: center;
    margin: 30px;
}
.five{


}
a:link {color: white;}
a:visit {color: gray;} 
p.biaodan {
            float: left;
            text-align: center;
            margin: 0px;
}
&lt;/style&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id=&quot;one&quot;&gt;&lt;img src=&quot;images/2.jpg&quot; width=&quot;120px&quot; height=&quot;50px&quot; &gt;
&lt;p class=&quot;two&quot;&gt;·&lt;a href=&quot;#&quot;&gt;导航链接一&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接二&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接三&lt;/a&gt;·&lt;a href=&quot;#&quot;&gt;导航链接四&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;three&quot;&gt;
&lt;h1&gt;文章的一级标题&lt;/h1&gt;
&lt;h3&gt;文章的二级标题&lt;/h3&gt;
&lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;
&lt;p&gt;这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，这是一个很长很长的段落，换行了&lt;/p&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这里有一个链接链接到&lt;a href=&quot;http://ife.baidu.com&quot;&gt;http://ife.baidu.com&lt;/a&gt;这是一个很长很长的段落,这是一个很长很长的段落,这里是个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落&lt;/p&gt;
&lt;img src=&quot;images/1.jpg&quot;&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是有个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,&lt;a href=&quot;http://ife.baidu.com&quot;&gt;这里有一个链接点击后打开新建窗口链接到http://ife.baidu.com&lt;/a&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;three&quot;&gt;
&lt;h1&gt;另一篇文章的一级标题&lt;/h1&gt;
&lt;h3&gt;文章的二级标题&lt;/h2&gt;
&lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,换行了&lt;/p&gt;
&lt;p&gt;这是一个很长很长的段落,这是一个很长很长的段落,&lt;a href=&quot;http://ife.baidu.com&quot;&gt;这里有一个链接链接到http://ife.baide.com&lt;/a&gt;,这是一个很长很长的段落,这是一个很长很长的段落,这里有个&lt;strong&gt;粗体字&lt;/strong&gt;这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,这是一个很长很长的段落,。&lt;/p&gt;
&lt;img src=&quot;images/1.jpg&quot;&gt;
&lt;ul&gt;
&lt;li&gt;列表项目一&lt;/li&gt;
&lt;li&gt;列表项目二&lt;/li&gt;
&lt;li&gt;列表项目三&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;div id=&quot;three&quot;&gt;
&lt;h1&gt;图片&lt;/h1&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;four&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;好看的图片&lt;/p&gt;&lt;img src=&quot;images/1.jpg&quot; height=&quot;100px&quot; width=&quot;150px&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;three&quot;&gt;
&lt;h1&gt;最后一篇文章一级标题&lt;/h1&gt;
&lt;h3&gt;文章的二级标题&lt;/h3&gt;
&lt;h5&gt;文章作者 文章发表时间&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;排名1&lt;/li&gt;
&lt;li&gt;排名2&lt;/li&gt;
&lt;li&gt;排名3&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;下面是一个表格，我这里给表格加了一个border=1好让你看出是一个表格，你们不用写html时候不需要加&lt;/p&gt;
&lt;table border=&quot;1&quot; width=&quot;100%;&quot;&gt;
&lt;tr&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;td&gt;表内容单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td background=&quot;gray&quot;&gt;总计&lt;/td&gt;
&lt;td colspan=&quot;2&quot; background=&quot;gray&quot;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div id=&quot;three&quot;&gt;
&lt;h3&gt;这是一个侧栏，这是侧栏的标题&lt;/h3&gt;
&lt;form&gt;请输入邮箱地址：&lt;input type=&quot;text&quot; value=&quot;这是一个文本框&quot;&gt;&lt;/form&gt;
&lt;form&gt;请输入密码：&lt;input type=&quot;password&quot; value=&quot;·········&quot;&gt;&lt;/form&gt;
&lt;form&gt;请重复输入密码：&lt;input type=&quot;password&quot; value=&quot;·········&quot;&gt;&lt;/form&gt;
&lt;form&gt;性别：&lt;input type=&quot;radio&quot; name=&quot;famel&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;famel&quot;&gt;女&lt;/form&gt;
&lt;form&gt;城市：&lt;select&gt;&lt;option&gt;北京&lt;/option&gt;&lt;/select&gt;&lt;/form&gt;
&lt;form&gt;&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;运动&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;艺术&lt;input type=&quot;radio&quot; name=&quot;1&quot;&gt;科学&lt;/form&gt;
&lt;form style=&quot;width: 200px;&quot;&gt; &lt;p class=&quot;biaodan&quot;&gt; 个人描述 &lt;/p&gt; &lt;textarea class=&quot;five&quot; cols=&quot;10&quot; rows=&quot;4&quot;&gt;这是一个多行输入框&lt;/textarea&gt; &lt;/form&gt;
&lt;form&gt;&lt;input type=&quot;submit&quot; background=&quot;blue&quot; value=&quot;确认提交&quot;&gt;&lt;/form&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this用法理解一点零版本</title>
    <link href="http://yoursite.com/1970/01/01/this%E7%94%A8%E6%B3%95%E7%90%86%E8%A7%A3%E4%B8%80%E7%82%B9%E9%9B%B6%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/1970/01/01/this用法理解一点零版本/</id>
    <published>1970-01-01T00:00:02.017Z</published>
    <updated>2017-09-02T02:37:40.354Z</updated>
    
    <content type="html"><![CDATA[<p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</p>
<p>例子1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">    var user = &quot;追梦子&quot;;</div><div class="line">    console.log(this.user); //undefined</div><div class="line">    console.log(this); //Window</div><div class="line">&#125;</div><div class="line">a();</div></pre></td></tr></table></figure></p>
<p>按照我们上面说的this最终指向的是调用它的对象，这里的函数a实际是被Window对象所点出来的，下面的代码就可以证明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">    var user = &quot;追梦子&quot;;</div><div class="line">    console.log(this.user); //undefined</div><div class="line">    console.log(this);　　//Window</div><div class="line">&#125;</div><div class="line">window.a();</div></pre></td></tr></table></figure></p>
<p>和上面代码一样吧，其实alert也是window的一个属性，也是window点出来的。</p>
<p>this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的</p>
<p>高程：this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于windows，而当函数被作为某个对象的方法调用时，this等于那个对象</p>
<p>详情参考 追梦子 博客 (<a href="http://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="external">http://www.cnblogs.com/pssp/p/5216085.html</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象&lt;/p&gt;
&lt;p&gt;例子1：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
    
  </entry>
  
</feed>
